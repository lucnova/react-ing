{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifCategoryGridItem.js","components/GifCategoryGrid.js","hooks/useFetchGifs.js","GifhoApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trimmedValue","trim","length","currCategories","findIndex","item","type","value","placeholder","onChange","target","getGifs","categoryName","a","sanitizedSearchTerm","encodeURI","url","fetch","myTenorFetchResponse","json","jsonResponse","console","log","undefined","error","results","gifsData","map","gifInfo","id","title","media","gif","GifCategoryGridItem","props","className","src","alt","GifCategoryGrid","data","loading","state","setState","useEffect","then","imgs","catch","useFetchGifs","isLoading","images","img","GifhoApp","categories","category","ReactDOM","render","document","querySelector"],"mappings":"yLAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAwB1C,OACC,uBAAMC,SAlBc,SAACC,GACrBA,EAAEC,iBAEF,IAAMC,EAAeL,EAAWM,OAE5BD,EAAaE,OAAS,GACzBT,GAAc,SAACU,GACd,OAAmE,IAA/DA,EAAeC,WAAU,SAACC,GAAD,OAAUA,IAASL,MAC/CJ,EAAc,IACR,CAAEI,GAAR,mBAAyBG,KAElBA,MAOV,UACC,uBAAOG,KAAK,OAAOC,MAAOZ,EAAYa,YAAY,SAASC,SAvBnC,SAACX,GAC1BF,EAAcE,EAAEY,OAAOH,UAuBtB,2C,+BC9BUI,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,6DAClBC,EAAsBC,UAAUH,GAErB,eACE,EACXI,EALgB,2CAK0BF,EAL1B,mCAGP,eAHO,kBAIL,GAJK,kBAQcG,MAAMD,GARpB,cAQfE,EARe,iBASMA,EAAqBC,OAT3B,WASfC,EATe,OAWrBC,QAAQC,IAAIF,QAEeG,IAAvBH,EAAaI,MAbI,wBAcZC,EAAYL,EAAZK,QACFC,EAAWD,EAAQE,KAAI,SAACC,GAC7B,MAAO,CACNC,GAAID,EAAQC,GACZC,MAAOF,EAAQZ,IACfA,IAAKY,EAAQG,MAAM,GAAGC,IAAIhB,QAnBR,kBAuBbU,GAvBa,iCAyBb,CAACN,EAAaI,QAzBD,mJAAH,sDCEPS,EAAsB,SAACC,GACnC,OACC,sBAAKC,UAAU,2CAAf,UACC,qBAAKC,IAAKF,EAAMlB,IAAKqB,IAAKH,EAAMJ,QAChC,4BAAII,EAAMJ,YCoCEQ,EApCS,SAAC,GAAsB,IAApB1B,EAAmB,EAAnBA,aAAmB,ECKlB,SAACA,GAAkB,IAAD,EACnBlB,mBAAS,CAClC6C,KAAM,GACNC,SAAS,IAHmC,mBACtCC,EADsC,KAC/BC,EAD+B,KAmB7C,OAbAC,qBAAU,WACThC,EAAQC,GACNgC,MAAK,SAACC,GACNH,EAAS,CACRH,KAAMM,EACNL,SAAS,OAGVM,OAAM,SAACtB,GACPH,QAAQG,MAAMA,QAEd,CAACZ,IAEG6B,EDtBoCM,CAAanC,GAAxCoC,EAF6B,EAErCR,QAAwBS,EAFa,EAElBV,KAe3B,OACC,qCACC,oBAAIJ,UAAU,sCAAd,SAAqDvB,IAEpDoC,GAAa,mBAAGb,UAAU,mCAAb,wBAEd,qBAAKA,UAAU,YAAf,SACEc,EAAOtB,KAAI,SAACuB,GAAD,OACX,cAAC,EAAD,eAAsCA,GAAZA,EAAIrB,aEEpBsB,EA3BE,SAACjB,GAAU,MAESxC,mBAAS,CAAC,cAFnB,mBAEpB0D,EAFoB,KAER3D,EAFQ,KAI3B,OACC,qCACC,gCACC,wCACY,4CACZ,0BAGD,cAAC,EAAD,CAAaA,cAAeA,IAE5B,8BACC,6BACE2D,EAAWzB,KAAI,SAAC0B,GAAD,OACf,cAAC,EAAD,CAAiBzC,aAAcyC,GAAeA,c,MClBpDC,IAASC,OAAO,cAAC,EAAD,IAAcC,SAASC,cAAc,Y","file":"static/js/main.db038c73.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\tconst [inputValue, setInputValue] = useState(''); // Si se deja vacio, el valor es undefined y handleChange Colapsa\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst trimmedValue = inputValue.trim();\r\n\r\n\t\tif (trimmedValue.length > 2) {\r\n\t\t\tsetCategories((currCategories) => {\r\n\t\t\t\tif (currCategories.findIndex((item) => item === trimmedValue) === -1) {\r\n\t\t\t\t\tsetInputValue(''); // Limpiar Input\r\n\t\t\t\t\treturn [trimmedValue, ...currCategories];\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn currCategories;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t<input type=\"text\" value={inputValue} placeholder=\"Search\" onChange={handleInputChange}></input>\r\n\t\t\t<button>+</button>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (categoryName) => {\r\n\tlet sanitizedSearchTerm = encodeURI(categoryName);\r\n\r\n\tconst apiKey = 'VXAD1LH05QB9';\r\n    const limit = 8;\r\n\tconst url = `https://g.tenor.com/v1/random?q=\"${sanitizedSearchTerm}\"&contentfilter=off&key=${apiKey}&limit=${limit}`;\r\n\r\n\ttry {\r\n\t\tconst myTenorFetchResponse = await fetch(url);\r\n\t\tconst jsonResponse = await myTenorFetchResponse.json();\r\n\r\n\t\tconsole.log(jsonResponse);\r\n\r\n\t\tif (jsonResponse.error === undefined) {\r\n\t\t\tconst { results } = jsonResponse;\r\n\t\t\tconst gifsData = results.map((gifInfo) => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: gifInfo.id,\r\n\t\t\t\t\ttitle: gifInfo.url,\r\n\t\t\t\t\turl: gifInfo.media[0].gif.url,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\r\n\t\t\treturn gifsData;\r\n\t\t} else {\r\n\t\t\treturn [jsonResponse.error];\r\n\t\t}\r\n\t} catch (error) {\r\n\t\treturn error;\r\n\t}\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifCategoryGridItem = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card animate__animated animate__bounceIn\">\r\n\t\t\t<img src={props.url} alt={props.title}></img>\r\n\t\t\t<p>{props.title}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React /*  useState, useEffect */ from 'react'; // useEffect -> Ejecutar c칩digo de manera condicional\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifCategoryGridItem } from './GifCategoryGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifCategoryGrid = ({ categoryName }) => {\r\n\t// const [imgs, setImgs] = useState([]);\r\n\tconst { loading:isLoading, data:images } = useFetchGifs(categoryName);\r\n\r\n\t//  - USE EFECT -\r\n\t//      Evita renderizar todo el c칩digo de nuevo para cuando hay cambios peque침os\r\n\t//      -> (callback, lista de dependencias)\r\n\t//  Si se manda vacia la lista de dependencias entonces solo se ejecuta 1 vez\r\n\t// useEffect(() => {\r\n\t// \tgetGifs(categoryName)\r\n\t// \t\t.then(setImgs)\r\n\t// \t\t.catch((error) => {\r\n\t// \t\t\tconsole.error(error);\r\n\t// \t\t});\r\n\t// }, [categoryName]); // El arreglo contiene variables de las cuales useEffect se ejecutar치 denuevo\r\n\r\n    // {isLoading && <p>Loading...</p>} => {isLoading ? <p>Loading...</p> : null}\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeInUp\">{categoryName}</h3>\r\n\r\n\t\t\t{isLoading && <p className='animate__animated animate__flash'>Loading...</p>}    \r\n\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t{images.map((img) => (\r\n\t\t\t\t\t<GifCategoryGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nGifCategoryGrid.propTypes = {\r\n\tcategoryName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifCategoryGrid;\r\n","/**\r\n * EL CUSTOM HOOK HACE EL LLAMADO DE getGifs\r\n * \r\n *  Hace el trabajo pesado, llama al helper para obtener los datos, los agarra y los reenvia devuelta\r\n *      con una nota sobre si cargaron o no.\r\n * \r\n *  Puede incluso re-usarse en otros lados, pues retorna las imagenes con un estado adicional y maneja la carga\r\n */\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (categoryName) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(categoryName)\r\n\t\t\t.then((imgs) => {\r\n\t\t\t\tsetState({\r\n\t\t\t\t\tdata: imgs,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.error(error);\r\n\t\t\t});\r\n\t}, [categoryName]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\n//import PropTypes from 'prop-types';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport GifCategoryGrid from './components/GifCategoryGrid';\r\n\r\nconst GifhoApp = (props) => {\r\n\t//const [categories, setCategories] = useState(['Pixel Art', 'Vinesauce', 'DDLC']);\r\n\tconst [categories, setCategories] = useState(['Pixel Art']);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>Gifho!</h2>\r\n                <small>lucnova</small>\r\n\t\t\t\t<hr />\r\n\t\t\t</div>\r\n\r\n\t\t\t<AddCategory setCategories={setCategories} />\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<ol>\r\n\t\t\t\t\t{categories.map((category) => (\r\n\t\t\t\t\t\t<GifCategoryGrid categoryName={category} key={category} />\r\n\t\t\t\t\t))}\r\n\t\t\t\t</ol>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\n//GifhoApp.propTypes = {};\r\n\r\nexport default GifhoApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifhoApp from './GifhoApp';\nimport './index.css';\n\nReactDOM.render(<GifhoApp />, document.querySelector('#root'));\n"],"sourceRoot":""}